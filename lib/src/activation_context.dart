import 'package:activatory/src/backends/complex_object_backend.dart';
import 'package:activatory/src/backends/generator_backend.dart';
import 'package:quiver/core.dart';

class ActivationContext {
  Map<BackendStoreKey, GeneratorBackend> _exactBackends = new Map<BackendStoreKey, GeneratorBackend>();

  GeneratorBackend find(Type type, {Object key}) {
    final keyObject = new BackendStoreKey(type, key);
    var result = _exactBackends[keyObject];
    if (result != null) {
      return result;
    }
    if (key != null) {
      return null;
    }
    var complexObjectBackend = new ComplexObjectBackend(type);
    register(complexObjectBackend, type);
    return complexObjectBackend;
  }

  GeneratorBackend get(Type type, {Object key}) {
    var backend = find(type, key: key);
    if (backend == null) {
      throw new Exception("Backend of type ${type} with key ${key} not found");
    }
    return backend;
  }

  void register(GeneratorBackend backend, Type type, {Object key}) {
    final keyObject = new BackendStoreKey(type, key);
    _exactBackends[keyObject] = backend;
  }
}

class BackendStoreKey {
  final Type _type;
  final Object _key;

  BackendStoreKey(this._type, this._key);

  /// NOTE: This method is generated by WebStorm
  @override
  int get hashCode => _type.hashCode ^ _key.hashCode;

  Object get key => _key;

  Type get type => _type;

  /// NOTE: This method is generated by WebStorm
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BackendStoreKey && runtimeType == other.runtimeType && _type == other._type && _key == other._key;
}
